<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Access modifiers.</font></font></h2> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Access modifiers control which classes and objects have access to the classes, properties, and methods in which they are included.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Access modifiers in the </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">class</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> declaration :</font></font></h3> 
        <ul> 
         <li><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: The class, as well as the instantiated objects of that class, are accessible by any other class.</font></font></li> 
         <li><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">default:</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> The class, as well as the instantiated objects of that class, are only accessible by classes that are declared in the same package.</font></font></li> 
        </ul> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Access modifiers for </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">properties</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> and </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">methods</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> :</font></font></p> 
        <ul> 
         <li><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: The property or method is accessible from any other class.</font></font></li> 
         <li><code>private</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: The property or method is only accessible from the class in which it is declared.</font></font></li> 
         <li><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">default:</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> The property or method is only accessible by classes that are declared in the same package.</font></font></li> 
         <li><code>protected</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">: The property or method is accessible from the classes of the package and from the subclasses.</font></font></li> 
        </ul> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In all the exercises that we are developing, we are using the two access modifiers for the classes ( </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">and </font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">default</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> ), since we said that several classes could be included in the same file, but only one of them could be declared as </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">We'll focus for now. </font><font style="vertical-align: inherit;">in differentiating the attributes </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">and </font></font><code>private</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">with an example.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Example:</font></font></h3> 
        <blockquote> 
         <p><code>&nbsp;&nbsp;&nbsp; public class OOP_ejemplos {</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SubClase miObj1 = new SubClase(8);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miObj1.y = 7; //miObj1.x = 7 devolvería error de compilación<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(miObj1.suma()); // suma(9, 7) devolvería error de compilación<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp; }</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp; class SubClase {</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int x;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int y;</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public SubClase(int _x) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = _x;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public SubClase(int _x, int _y) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = _x;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = _y;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int suma() {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x + y;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int suma(int _x, int _y) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _x + _y;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp;&nbsp; }</code></p> 
        </blockquote> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In the code above, we can see that:</font></font></p> 
        <ul> 
         <li>Si queremos asignar un valor a <code>x</code>, necesitamos hacerlo desde el constructor, ya que posteriormente no podríamos modificar su valor, al estar declarada como privada.</li> 
         <li>La propiedad <code>y</code> sí puede ser accedida y modificada desde cualquier otra clase, sin necesidad de ser inicializada en el constructor.</li> 
         <li>El método <code>suma(int _x, int _y)</code> no puede ser utilizado desde el exterior de la clase, por lo que hay que utilizar el método <code>suma()</code> habiendo inicializado previamente las propiedades a través del constructor con parámetros.</li> 
        </ul> 
        <h3>Ejercicio:</h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Building on the example code, have the value of the two properties read from the keyboard in the main() method. </font><font style="vertical-align: inherit;">Also make the method intervene in the calculation of the sum of the two properties </font></font><code>private int suma(int _x, int _y)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, bearing in mind that this method can only be used from the class itself.</font></font></p> 
        <p><small><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Note:</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> Also remove comments from the code.</font></font></small></p></body></html>