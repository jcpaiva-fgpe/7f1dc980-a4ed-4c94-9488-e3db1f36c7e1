<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">What is Object Oriented Programming (OOP)?</font></font></h2> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">While procedural programming refers to writing procedures or methods that perform operations on data, Object Oriented Programming refers to creating objects that contain both data and methods that manipulate that data.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Advantage:</font></font></h3> 
        <ul> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">it is faster and easier to execute.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">facilitates the structuring of programs.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">follows the DRY "Don't Repeat Yourself" principle.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">makes it easy to maintain, debug, and modify your code.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">enables the creation of reusable applications with less code and less development time.</font></font></li> 
        </ul> 
        <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Note:</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> The "Don't Repeat Yourself" (DRY) principle refers to the reduction in code repetition, extracting the code that is common in various parts of the application, placing them in a single place, which allows their reuse instead of of its repetition.</font></font></p> 
        <hr> 
        <h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">What are Classes and Objects?</font></font></h2> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Classes and objects constitute the two main aspects of Object Oriented Programming.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The following table shows the difference between classes and objects:</font></font></p> 
        <table border="1" cellpadding="1" cellspacing="1" style="width:100%"> 
         <thead> 
          <tr> 
           <th scope="col"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">class</font></font></th> 
           <th scope="col"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">objects</font></font></th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr> 
           <td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Fruit</font></font></td> 
           <td> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Apple</font></font></p> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Banana</font></font></p> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Mango</font></font></p> </td> 
          </tr> 
          <tr> 
           <td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Car</font></font></td> 
           <td> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Volvo</font></font></p> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Audi</font></font></p> <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Toyota</font></font></p> </td> 
          </tr> 
         </tbody> 
        </table> 
        <p>&nbsp;</p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Therefore, we must understand a class as a template for object creation. </font><font style="vertical-align: inherit;">An object will be an </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">instance</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> of a class.</font></font></p> 
        <p>&nbsp;</p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">When we create an object, it inherits all the variables and methods of the class.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Create a class in Java.</font></font></h3> 
        <p>Recordamos ahora, algunas de los conceptos que abordamos en los primeros ejercicios de Java.</p> 
        <p><strong>Los programas en Java</strong> (y en cualquier lenguaje orientado a objetos) <strong>se organizan en clases</strong>.</p> 
        <p>Java nos obliga a que <strong>en cada programa haya al menos una clase</strong>, en concreto una <strong>clase pública</strong>.</p> 
        <p><code>public class OOP {</code></p> 
        <p><code>}</code></p> 
        <p>Es importante recordar que <strong>el nombre del fichero tiene que coincidir exactamente con el nombre de la clase</strong>, teniendo cuidado con las mayúsculas y minúsculas, que en Java son caracteres distintos.</p> 
        <p><tt>OOP.java</tt></p> 
        <p>Java nos obliga a que <strong>en cada aplicación haya un método main</strong>, que es por donde empezará a ejecutarse el código de la misma; es lo que se llama el punto de entrada de la aplicación.</p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Below is the basic skeleton of a Java application:</font></font></p> 
        <blockquote> 
         <p><code>public class OOP {<br> <br> &nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO code application logic here<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp; &nbsp;<br> }</code></p> 
        </blockquote> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Normally, each class is written in a separate file. </font><font style="vertical-align: inherit;">However, so that we can continue using JuezLTI, we will define all the classes in a single file, taking into account that only the class that contains the method </font></font><code>main</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">will have the modifier </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">. </font><font style="vertical-align: inherit;">All other classes will be placed after the closing brace of that public class.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Example:</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Below are two classes that would be defined together in a single OOP.java file:</font></font></p> 
        <blockquote> 
         <p><code>package oop;</code></p> 
         <p><code>public class OOP {<br> <br> &nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Creando una clase");<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp; &nbsp;<br> }</code></p> 
         <p><code>class SubClase {<br> &nbsp; int x = 5;<br> }</code></p> 
        </blockquote> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exercise:</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">To the following public class, which contains the method</font></font><code>main()</code></p> 
        <blockquote> 
         <p><code>package oop;</code></p> 
         <p><code>public class OOP {</code></p> 
         <p><br> <code>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Creando una clase");<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp; &nbsp;<br> }</code></p> 
        </blockquote> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Add the class </font></font><code>Modulo</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p> 
        <blockquote> 
         <p><code>class Modulo {<br> &nbsp; int nota = 8;<br> }</code></p> 
        </blockquote> 
        <p>&nbsp;</p></body></html>