<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><p>Escribe un programa en Java que elimine de un array los números enteros que estén repetidos en el mismo, de tal manera que solo dejará el primero de ellos.</p>

<p><strong>Ejemplo:</strong></p>

<ul>
	<li>Dado el array de enteros {1, 2, 1, 8, 5, 2, 8, 2, 4, 9, 12, 8, 1, 2}, lo transformará en un array: {1, 2, 8, 5, 4, 9, 12}</li>
	<li>Dado el array de enteros {8, 20, 555, 555, 555, 8, 1, 9, 2, 555, 8, 20, 80}, lo transformará en el array: {8, 20, 555, 1, 9, 2, 80}</li>
</ul>

<h3><strong>ENTRADA</strong></h3>

<p>La entrada comienza con un número indicando cuántos casos de prueba habrá que procesar.</p>

<p>Cada uno de los casos estará formado por:</p>

<ul>
	<li>Una primera línea con el número L&nbsp;de elementos del array, donde L&nbsp;&gt;&nbsp;0</li>
	<li>Una segunda con los L&nbsp;elementos de dicho array separados por un espacio.&nbsp;</li>
</ul>

<h3><strong>SALIDA</strong></h3>

<p>Por cada caso de prueba, el programa escribirá el contenido del array una vez eliminados los números repetidos.</p>

<h3><strong>RESTRICCIONES</strong></h3>

<p>Se resolverá el problema haciendo uso de la siguiente descomposición funcional:</p>

<ul>
	<li>Una función que reciba un array de enteros y un número entero positivo como argumento y devuelva la posición del array de la primera aparición de dicho número. La función devolverá -1 si el número pasado como argumento no aparece en el array.</li>
	<li>Una función que reciba un array de enteros como argumento y devuelva otro array distinto en el que se habrán suprimido los números repetidos, de tal manera que cada número aparezca solo una vez, en el mismo orden en el que aparecen en el array original.&nbsp; <strong>ATENCIÓN:</strong> Vamos a programar esta función con cuidado, haciendo un uso óptimo de la memoria. Para ello, crearás un array auxiliar del mismo tamaño del original, en el que solo introduciremos los números no repetidos. En este array pueden quedar posiciones vacias (al valor de inicialización), y deberemos llevar la cuenta de cuántas de esas posiciones del array contienen número válidos para la resolución del problema.&nbsp;Una vez que sabemos cuántos son estos número no repetidos, crearemos un nuevo array de dicho tamaño y pasaremos a él los números de la solución. Éste será el array que devolvamos, que tendrá el tamaño justo para la solución buscada. <strong>Es decir, NO se puede crear un nuevo array para cada número nuevo no repetido que encontremos.</strong></li>
</ul>

<p>El programa principal, para cada caso, imprimirá el resultado de rotar la cadena las N posiciones a derecha o a izquierda.</p>

<h3><strong>OPTIMIZACIÓN ALGORÍTMICA</strong></h3>

<p>JuezLTI no lo va a tener en cuenta a la hora de dar como correcto o no el ejercicio, pero vamos a intentar programar de la manera más óptima posible, <strong>reduciendo al máximo el uso de memoria</strong>. Para ello, debes observar y plasmar en tu algoritmo, la manera de proceder descrita para la segunda función en la sección de "Restricciones".</p></body></html>