<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Escreva um programa Java que receba um inteiro e avalie se é assustador ou não, onde um número de referência é aquele que lê o mesmo do começo ao fim e do começo ao fim.</font></font></p> 
        <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exemplo:</font></font></strong></p> 
        <ul> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O número 30303 é capicua</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O número 4576754 é capicúa</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O número 4994 é capicua</font></font></li> 
        </ul> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ENTRADA</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">A entrada começa com um número indicando quantos casos de teste serão processados.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Cada um dos casos será formado por uma linha com um número N para avaliar se é capicua ou não, onde 0&lt;= N &gt;= 2147483647 (um int)&nbsp;</font></font></p> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SAÍDA</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Para cada caso de teste, o programa escreverá CAPICÚA ou NOT CAPICÚA, dependendo se o número atende ou não a esta propriedade.</font></font></p> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">RESTRIÇÕES</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O problema será resolvido usando a seguinte decomposição funcional:</font></font></p> 
        <ul> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Uma função que recebe um inteiro positivo como argumento e calcula e retorna o número de dígitos que esse número possui. </font><font style="vertical-align: inherit;">A função lançará IllegalArgumentException se o número recebido como argumento for um número negativo.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Uma função que recebe um inteiro positivo como argumento e retorna esse número dividido em dígitos em uma matriz de inteiros, onde cada dígito do número ocupará uma posição na matriz (o dígito mais à esquerda do número ocupará a posição inicial de a matriz). </font><font style="vertical-align: inherit;">A função lançará IllegalArgumentException se o número passado como argumento for negativo.</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Uma função que recebe uma matriz de inteiros como argumento e avalia e retorna se essa matriz contém a mesma sequência de números lidos de frente para trás e de trás para frente.&nbsp;</font></font></li> 
        </ul> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">O programa principal, para cada caso, imprimirá se o número é caprichoso ou não, e imprimirá a mensagem de erro correspondente se o caso for um número negativo. </font><font style="vertical-align: inherit;">Para resolver o problema, você fará uso das funções.</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">OTIMIZAÇÃO ALGORITMICA</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">JuezLTI não levará isso em consideração ao decidir se o exercício está correto ou não, mas tentaremos programá-lo da maneira mais otimizada possível, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">minimizando o uso de memória</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> e </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">minimizando o tempo de execução</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Para fazer isso, você deve levar em conta que pode resolver o exercício </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">SEM</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> &nbsp;criar um array auxiliar (otimizar o uso de memória) e que pode resolver o exercício sem ter que percorrer todo o array, apenas metade, no sentido de que assim que como o número não é conspícuo não é necessário continuar verificando, e também no sentido de que percorrendo apenas metade do array posso saber se o número é conspícuo (otimizar o uso do tempo de execução). </font><font style="vertical-align: inherit;">Se você projetar bem seu algoritmo, poderá obter as duas otimizações.</font></font></p></body></html>