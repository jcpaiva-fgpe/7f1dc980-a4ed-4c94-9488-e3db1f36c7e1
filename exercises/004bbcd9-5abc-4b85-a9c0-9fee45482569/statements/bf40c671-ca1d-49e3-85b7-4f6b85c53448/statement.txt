<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Write a Java program that receives an integer and evaluates whether it is daunting or not, where a datum number is one that reads the same from beginning to end as it does from end to beginning.</font></font></p> 
        <p><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Example:</font></font></strong></p> 
        <ul> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The number 30303 is capicua</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The number 4576754 is capicúa</font></font></li> 
         <li><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The number 4994 is capicua</font></font></li> 
        </ul> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">ENTRY</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The entry begins with a number indicating how many test cases will be processed.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Each of the cases will be formed by a line with a number N to evaluate if it is capicua or not, where 0&lt;= N &gt;= 2147483647 (an int)&nbsp;</font></font></p> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">EXIT</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">For each test case, the program will write CAPICÚA or NOT CAPICÚA, depending on whether the number complies with this property or not.</font></font></p> 
        <h3><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">RESTRICTIONS</font></font></strong></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">The problem will be solved using the following functional decomposition:</font></font></p> 
        <ul> 
         <li>Una función que reciba un número entero positivo como argumento y calcule y devuelva la cantidad de cifras que tiene dicho número. La función lanzará la excepción IllegalArgumentException en caso de que el número recibido como argumento sea un número negativo.</li> 
         <li>Una función que reciba un número entero positivo como argumento y devuelva dicho número descompuesto en cifras en un array de enteros, donde cada cifra del número ocupará una posición del array (la cifra más a la izquierda del número, ocupará la posición inicial del array). La función lanzará la excepción IllegalArgumentException si el número pasado como argumento es negativo.</li> 
         <li>Una función que reciba un array de enteros&nbsp;como argumento y evalúe y devuelva si dicho array contiene la misma secuencia de números leída de delante a atrás que de atrás a adelante.&nbsp;</li> 
        </ul> 
        <p>El programa principal, para cada caso, imprimirá si el número es capicúa o no, e imprimirá el mensaje de error correspondiente si el caso es un número negativo. Para resolver el problema hará uso de las funciones.</p> 
        <h3>OPTIMIZACIÓN ALGORÍTMICA</h3> 
        <p>JuezLTI no lo va a tener en cuenta a la hora de dar como correcto o no el ejercicio, pero vamos a intentar programar de la manera más óptima posible, <strong>reduciendo al máximo el uso de memoria</strong> y <strong>reduciendo al máximo el tiempo de ejecución</strong>.</p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">To do this, you must take into account that you can solve the exercise </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">WITHOUT</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> &nbsp;creating an auxiliary array (optimize memory use) and that you can solve the exercise without having to go through the entire array, only half, in the sense that as soon as the number it is not conspicuous it is not necessary to continue checking, and also in the sense that by going through only half of the array I can know if the number is conspicuous (optimize the use of execution time). </font><font style="vertical-align: inherit;">If you design your algorithm well you will be able to achieve both optimizations.</font></font></p></body></html>