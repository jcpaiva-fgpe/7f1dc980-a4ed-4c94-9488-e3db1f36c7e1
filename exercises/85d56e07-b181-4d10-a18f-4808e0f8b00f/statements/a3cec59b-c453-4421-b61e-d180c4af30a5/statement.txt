<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><p>Una <strong>constante</strong> es un <strong>espacio en la memoria que almacena un valor que no puede cambiar durante la ejecución del programa</strong>. Una constante es como una variable, pero que a diferencia de ésta, guarda un valor fijo, que no puede cambiar.</p>

<p>A una constante se le deberá asignar su valor durante la declaración de la misma, pues luego no se podrá realizar ninguna operación de asignación sobre ella (realmente, no hace falta darle valor en la declaración, aunque es lo recomendable, pero sólo se puede hacer una operación de asignación sobre ella). Será un elemento de solo lectura, podremos usar en nuestro programa el valor que contiene, pero no podremos modificarlo.</p>

<p>El valor que almacena una constante no puede cambiar durante la ejecución del programa.&nbsp;</p>

<p>Las constantes sirven para definir valores que no deben cambiar durante la ejecución de un programa:</p>

<ul>
	<li>Porque <strong>representan datos que no cambian nunca</strong>. Por ejemplo, el número “pi”, que siempre valdrá 3,1416.</li>
	<li>Porque <strong>representan valores que no cambiarán durante la ejecución del programa</strong>. Por ejemplo, en un programa de facturación se puede definir una constante llamada IVA y fijarla al 21%. Este valor no cambiará durante la ejecución del programa. Si alguna vez cambia, habría que cambiar el valor en la declaración de la constante, en el código fuente, y volver a compilar.</li>
</ul>

<p>¿Por qué usar constantes en vez de usar directamente en el código el valor que contienen?&nbsp;</p>

<ul>
	<li>Primero <strong>por claridad</strong>, siempre será más legible leer la constante pi, que el número 3,1416. O la constante IVA, que 21%.</li>
	<li>Segundo, porque <strong>si alguna vez ese valor tiene que cambiar, solo tendré que cambiar el valor en la declaración de la constante</strong> y automáticamente estará cambiado en el resto del código en el que se usa. De otra forma, tendría que cambiar uno a uno todos los usos de dicho valor en mi código.</li>
</ul>

<h3>Sintaxis para definir una constante:</h3>

<blockquote>
<p><code>final tipo nombre = valor;</code></p>
</blockquote>

<p>donde:</p>

<ul>
	<li>La palabra clave final es la que establece que lo que se está definiendo es una constante. La palabra final indica que el valor que se le asigne en la declaración será su valor final, que se mantendrá inalterable durante todo el programa.&nbsp;</li>
	<li>El nombre de la constante debe ir, por convención, todo en mayúscula. Si está formado por varias palabras, éstas irán separadas por _.</li>
	<li><strong><s>Si intentamos variar su contenido, el compilador dará un error.</s></strong></li>
</ul>

<h3>Ejemplos:</h3>

<blockquote>
<p><code>final int IVA = 21;<br>
final double PI = 3.1416;<br>
final int EDAD_MINIMA = 0;</code></p>
</blockquote>

<h3>Ejercicio:</h3>

<p>El ejercicio anterior solicitaba la declaración e inicialicialización de las siguientes variables:</p>

<blockquote>
<p><code>numero </code>de tipo entero.<br>
<code>numeroReal </code>de tipo float.<br>
<code>letra </code>de tipo carácter.<br>
<code>estaLloviendo </code>de tipo booleano.</p>
</blockquote>

<p>Los valores de cada una de esas variables será el siguiente.</p>

<blockquote>
<p><code>numero</code>: 18<br>
<code>numeroReal</code>: 3,14<br>
<code>letra</code>: P<br>
<code>estaLloviendo</code>: false</p>
</blockquote>

<p><strong>Amplía dicho ejercicio, de manera que se inicialice también la constante PI con el valor 3.14.</strong></p>

<p>El resultado de la aplicación será el que se puede observar en el <em>OUTPUT</em>.</p></body></html>