<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">métodos estáticos.</font></font></h2> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Frequentemente veremos programas Java que possuem atributos e métodos com modificadores </font></font><code>static</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Um método criado com o modificador </font></font><code>static</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">significa que ele pode ser acessado sem criar um objeto da classe, diferentemente do modificador </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, o que significa que ele só pode ser acessado através de instâncias (objetos) da classe.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exemplo:</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">No código a seguir, criamos um método estático da Subclasse para exibir uma mensagem com o uso que pode ser dado aos parâmetros da classe. </font><font style="vertical-align: inherit;">Para usar tal método, não é necessário instanciar nenhum objeto da classe:</font></font></p> 
        <blockquote> 
         <p><code>package oop_ejemplos;</code></p> 
         <p><code>public class OOP_ejemplos {</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>SubClase.</strong>uso();<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp; &nbsp;<br> }</code></p> 
         <p><code>class SubClase {<br> &nbsp; int x = 5;<br> &nbsp; int y = 7;<br> &nbsp; &nbsp;<br> &nbsp; <strong>static</strong> void uso() {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("x indica el ancho e y el alto");<br> &nbsp; }<br> }</code></p> 
        </blockquote> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exercício</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Modifique o exercício anterior, adicionando um método estático&nbsp; </font></font><code>calificacionMaxima()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">que retorne a nota máxima permitida no módulo ( </font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">10</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> ). </font><font style="vertical-align: inherit;">O aplicativo solicitará por teclado, no método </font></font><code>main()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, a nota do módulo, até que a nota seja menor ou igual à nota máxima permitida.</font></font></p></body></html>