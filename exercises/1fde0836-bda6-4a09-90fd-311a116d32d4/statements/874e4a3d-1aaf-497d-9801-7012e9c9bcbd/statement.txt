<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">static methods.</font></font></h2> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">We will often see Java programs that have attributes and methods with modifiers </font></font><code>static</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">A method created with the modifier </font></font><code>static</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">means that it can be accessed without creating an object of the class, unlike the modifier </font></font><code>public</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, which means that it can only be accessed through instances (objects) of the class.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Example:</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In the following code, we create a static method of the Subclass to display a message with the use that can be given to the parameters of the class. </font><font style="vertical-align: inherit;">To use such a method, it is not necessary to instantiate any object of the class:</font></font></p> 
        <blockquote> 
         <p><code>package oop_ejemplos;</code></p> 
         <p><code>public class OOP_ejemplos {</code></p> 
         <p><code>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>SubClase.</strong>uso();<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp; &nbsp;<br> }</code></p> 
         <p><code>class SubClase {<br> &nbsp; int x = 5;<br> &nbsp; int y = 7;<br> &nbsp; &nbsp;<br> &nbsp; <strong>static</strong> void uso() {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("x indica el ancho e y el alto");<br> &nbsp; }<br> }</code></p> 
        </blockquote> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exercise</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Modify the previous exercise, adding a static method&nbsp; </font></font><code>calificacionMaxima()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">that returns the maximum grade allowed in the module ( </font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">10</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> ). </font><font style="vertical-align: inherit;">The application will request by keyboard, in the method </font></font><code>main()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, the grade of the module, until the grade is less than or equal to the maximum grade allowed.</font></font></p></body></html>