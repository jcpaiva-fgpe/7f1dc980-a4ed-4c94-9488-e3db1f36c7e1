<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Parameters and arguments</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Most functions use </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">INPUT PARAMETERS</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , which will be used in the enclosing algorithm code in order to generalize the problem they solve.</font></font></p> 
        <blockquote> 
         <p><code><a href="https://translate.google.com/website?sl=es&amp;tl=en&amp;hl=es&amp;client=webapp&amp;u=https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html%23pow-double-double-">Math.pow</a>(double&nbsp;a, double&nbsp;b)</code></p> 
        </blockquote> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">These input parameters are nothing more than </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">internal variables of the function</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> that represent in a generic way the data that the algorithm of the function needs to solve the problem it solves.&nbsp;</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">These function-internal variables, called parameters, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">exist only within the function</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , and can only be used within the function, in your algorithm code.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">These special internal variables of the function, called parameters, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">will take their concrete and real values ​​at the time of using the function</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , when it is called, and these may be different in each use of the function. </font><font style="vertical-align: inherit;">The values ​​that are passed to the function at the time of the call are called </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">input ARGUMENTS</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .&nbsp;</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">That is, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">the parameters of a function are internal variables of the function that take as initial value (INITIALIZATION) the values ​​passed as arguments at the time of the function call</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Example</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">It would be interesting if the number corresponding to the multiplication table that they contain appears in both the header and footer of the tables.</font></font></p> 
        <p>Podríamos intentar concatenar la variable <code>contador</code> en el mensaje:</p> 
        <blockquote> 
         <p><code>&nbsp;&nbsp;&nbsp; static void cabeceraTablaMultiplicar() {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("** INICIO TABLA " + <s>contador</s> + " **");<br> &nbsp;&nbsp;&nbsp; }</code></p> 
        </blockquote> 
        <p>Pero, esto generaría el error <code>"cannot find symbol"</code>, ya que contador es una variable local al método <code>main()</code> y no puede ser utilizada fuera del bloque correspondiente a dicho método <code>main()</code>.</p> 
        <p>La manera correcta de pasar el valor de la variable contador al método <code>cabeceraTablaMultiplicar()</code> es a través de la invocación:</p> 
        <blockquote> 
         <p><code>cabeceraTablaMultiplicar(contador)</code></p> 
        </blockquote> 
        <p>Pero, debe haber una correlación entre los argumentos que se envían entre los paréntesis y los que son recogidos por el método invocado, por lo que deberemos modificar las declaraciones de los métodos <code>cabeceraTablaMultiplicar()</code> y <code>pieTablaMultiplicar()</code>:</p> 
        <blockquote> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void cabeceraTablaMultiplicar(int contador) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("** INICIO TABLA " + contador + " **");<br> &nbsp;&nbsp;&nbsp; }</code></p> 
        </blockquote> 
        <p>Hay que señalar que no es necesario que las variables que se utilizan en la invocación y la que se utiliza en la definición del método tengan el mismo nombre.</p> 
        <h3>Ejercicio</h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">In addition to incorporating the counter into the method </font></font><code>pieTablaMultiplicar()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, it moves the code that generates each complete multiplication table into a method.</font></font><code>tablaDeUnNumero(contador).</code></p></body></html>