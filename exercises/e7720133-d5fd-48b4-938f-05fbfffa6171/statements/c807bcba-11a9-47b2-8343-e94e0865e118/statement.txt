<!DOCTYPE html><html><head><meta charset='utf-8'><meta http-equiv='X-UA-Compatible' content='IE=edge'><title>Page Title</title><meta name='viewport' content='width=device-width, initial-scale=1'><link rel='stylesheet' type='text/css' media='screen' href='main.css'><script src='main.js'></script></head><body><h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Parâmetros e argumentos</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">A maioria das funções usa </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">INPUT PARAMETERS</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , que serão usados ​​no código do algoritmo de inclusão para generalizar o problema que elas resolvem.</font></font></p> 
        <blockquote> 
         <p><code><a href="https://translate.google.com/website?sl=es&amp;tl=pt&amp;hl=es&amp;client=webapp&amp;u=https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html%23pow-double-double-">Math.pow</a>(double&nbsp;a, double&nbsp;b)</code></p> 
        </blockquote> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Esses parâmetros de entrada nada mais são do que </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">variáveis ​​internas da função</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> que representam de forma genérica os dados que o algoritmo da função precisa para resolver o problema que resolve.&nbsp;</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Essas variáveis ​​internas da função, chamadas de parâmetros, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">existem apenas dentro da função</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> e só podem ser usadas dentro da função, em seu código de algoritmo.</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Essas variáveis ​​internas especiais da função, chamadas de parâmetros, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">terão seus valores concretos e reais no momento da utilização da função</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> , quando for chamada, e estes podem ser diferentes em cada uso da função. </font><font style="vertical-align: inherit;">Os valores que são passados ​​para a função no momento da chamada são chamados </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">de ARGUMENTOS de entrada</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .&nbsp;</font></font></p> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Ou seja, </font></font><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">os parâmetros de uma função são variáveis ​​internas da função que recebem como valor inicial (INITIALIZATION) os valores passados ​​como argumentos no momento da chamada da função</font></font></strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .</font></font></p> 
        <h3><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Exemplo</font></font></h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Seria interessante se o número correspondente à tabuada que eles contêm aparecesse tanto no cabeçalho quanto no rodapé das tabelas.</font></font></p> 
        <p>Podríamos intentar concatenar la variable <code>contador</code> en el mensaje:</p> 
        <blockquote> 
         <p><code>&nbsp;&nbsp;&nbsp; static void cabeceraTablaMultiplicar() {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("** INICIO TABLA " + <s>contador</s> + " **");<br> &nbsp;&nbsp;&nbsp; }</code></p> 
        </blockquote> 
        <p>Pero, esto generaría el error <code>"cannot find symbol"</code>, ya que contador es una variable local al método <code>main()</code> y no puede ser utilizada fuera del bloque correspondiente a dicho método <code>main()</code>.</p> 
        <p>La manera correcta de pasar el valor de la variable contador al método <code>cabeceraTablaMultiplicar()</code> es a través de la invocación:</p> 
        <blockquote> 
         <p><code>cabeceraTablaMultiplicar(contador)</code></p> 
        </blockquote> 
        <p>Pero, debe haber una correlación entre los argumentos que se envían entre los paréntesis y los que son recogidos por el método invocado, por lo que deberemos modificar las declaraciones de los métodos <code>cabeceraTablaMultiplicar()</code> y <code>pieTablaMultiplicar()</code>:</p> 
        <blockquote> 
         <p><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void cabeceraTablaMultiplicar(int contador) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("** INICIO TABLA " + contador + " **");<br> &nbsp;&nbsp;&nbsp; }</code></p> 
        </blockquote> 
        <p>Hay que señalar que no es necesario que las variables que se utilizan en la invocación y la que se utiliza en la definición del método tengan el mismo nombre.</p> 
        <h3>Ejercicio</h3> 
        <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Além de incorporar o contador no método </font></font><code>pieTablaMultiplicar()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, ele move o código que gera cada tabuada completa para um método.</font></font><code>tablaDeUnNumero(contador).</code></p></body></html>